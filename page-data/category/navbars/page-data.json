{
    "componentChunkName": "component---src-components-gallery-gallery-category-page-tsx",
    "path": "/category/navbars/",
    "result": {"pageContext":{"category":{"slug":"navbars","name":"Navbars"},"components":[{"_component":"DoubleNavbar","code":"import React, { useState } from 'react';\nimport {\n  createStyles,\n  Navbar,\n  UnstyledButton,\n  Tooltip,\n  hexToRgba,\n  Title,\n  Image,\n} from '@mantine/core';\nimport {\n  Home2,\n  Gauge,\n  DeviceDesktopAnalytics,\n  Fingerprint,\n  CalendarStats,\n  User,\n  Settings,\n} from 'tabler-icons-react';\nimport logo from '../NavbarMinimal/logo.svg';\n\nconst useStyles = createStyles((theme) => ({\n  wrapper: {\n    display: 'flex',\n  },\n\n  aside: {\n    flex: '0 0 60px',\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[9] : theme.white,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    borderRight: `1px solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[4] : theme.colors.gray[3]\n    }`,\n  },\n\n  main: {\n    flex: 1,\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n  },\n\n  mainLink: {\n    width: 44,\n    height: 44,\n    borderRadius: theme.radius.md,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.colors.gray[7],\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[5] : theme.colors.gray[0],\n    },\n  },\n\n  mainLinkActive: {\n    '&, &:hover': {\n      backgroundColor:\n        theme.colorScheme === 'dark'\n          ? hexToRgba(theme.colors[theme.primaryColor][9], 0.25)\n          : theme.colors[theme.primaryColor][0],\n      color: theme.colors[theme.primaryColor][theme.colorScheme === 'dark' ? 4 : 7],\n    },\n  },\n\n  title: {\n    boxSizing: 'border-box',\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    marginBottom: theme.spacing.md,\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[8] : theme.white,\n    padding: theme.spacing.md,\n    paddingTop: 18,\n    height: 60,\n    borderBottom: `1px solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[4] : theme.colors.gray[3]\n    }`,\n  },\n\n  logo: {\n    boxSizing: 'border-box',\n    width: '100%',\n    height: 60,\n    paddingTop: theme.spacing.md,\n    borderBottom: `1px solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[4] : theme.colors.gray[3]\n    }`,\n    marginBottom: theme.spacing.xl,\n  },\n\n  link: {\n    display: 'block',\n    textDecoration: 'none',\n    borderTopRightRadius: theme.radius.md,\n    borderBottomRightRadius: theme.radius.md,\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.colors.gray[7],\n    padding: `${theme.spacing.sm}px ${theme.spacing.md}px`,\n    fontSize: theme.fontSizes.sm,\n    marginLeft: -1,\n    marginRight: theme.spacing.md,\n    fontWeight: 500,\n    borderLeft: `1px solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[4] : theme.colors.gray[3]\n    }`,\n\n    '&:hover': {\n      borderLeftColor: theme.colors[theme.primaryColor][theme.colorScheme === 'dark' ? 6 : 4],\n      backgroundColor:\n        theme.colorScheme === 'dark'\n          ? hexToRgba(theme.colors[theme.primaryColor][9], 0.25)\n          : theme.colors[theme.primaryColor][0],\n      color: theme.colors[theme.primaryColor][theme.colorScheme === 'dark' ? 4 : 7],\n    },\n  },\n\n  linkActive: {\n    '&, &:hover': {\n      borderLeftColor: theme.colors[theme.primaryColor][theme.colorScheme === 'dark' ? 7 : 5],\n      backgroundColor: theme.colors[theme.primaryColor][theme.colorScheme === 'dark' ? 7 : 5],\n      color: theme.white,\n    },\n  },\n}));\n\nconst mainLinksMockdata = [\n  { icon: Home2, label: 'Home' },\n  { icon: Gauge, label: 'Dashboard' },\n  { icon: DeviceDesktopAnalytics, label: 'Analytics' },\n  { icon: CalendarStats, label: 'Releases' },\n  { icon: User, label: 'Account' },\n  { icon: Fingerprint, label: 'Security' },\n  { icon: Settings, label: 'Settings' },\n];\n\nconst linksMockdata = [\n  'Security',\n  'Settings',\n  'Dashboard',\n  'Releases',\n  'Account',\n  'Orders',\n  'Clients',\n  'Databases',\n  'Pull Requests',\n  'Open Issues',\n  'Wiki pages',\n];\n\nexport function DoubleNavbar() {\n  const { classes, cx } = useStyles();\n  const [active, setActive] = useState('Releases');\n  const [activeLink, setActiveLink] = useState('Settings');\n\n  const mainLinks = mainLinksMockdata.map((link) => (\n    <Tooltip label={link.label} position=\"right\" withArrow transitionDuration={0}>\n      <UnstyledButton\n        onClick={() => setActive(link.label)}\n        className={cx(classes.mainLink, { [classes.mainLinkActive]: link.label === active })}\n      >\n        <link.icon />\n      </UnstyledButton>\n    </Tooltip>\n  ));\n\n  const links = linksMockdata.map((link) => (\n    <a\n      className={cx(classes.link, { [classes.linkActive]: activeLink === link })}\n      href=\"/\"\n      onClick={(event) => {\n        event.preventDefault();\n        setActiveLink(link);\n      }}\n      key={link}\n    >\n      {link}\n    </a>\n  ));\n\n  return (\n    <Navbar height={750}>\n      <Navbar.Section grow className={classes.wrapper}>\n        <div className={classes.aside}>\n          <div className={classes.logo}>\n            <Image src={logo} alt=\"Mantine logo\" width={30} mx=\"auto\" />\n          </div>\n          {mainLinks}\n        </div>\n        <div className={classes.main}>\n          <Title order={4} className={classes.title}>\n            {active}\n          </Title>\n\n          {links}\n        </div>\n      </Navbar.Section>\n    </Navbar>\n  );\n}\n","category":{"name":"Navbars","path":"/category/navbars/"},"url":"/component/double-navbar","attributes":{"title":"Navbar with 2 sections","category":"navbars","author":"rtivital","withColor":true,"dependencies":[],"canvas":{"center":false}}},{"_component":"NavbarLinksGroup","code":"import React, { useState } from 'react';\nimport { Group, Box, Collapse, ThemeIcon, Text, UnstyledButton, createStyles } from '@mantine/core';\nimport { ChevronRightIcon } from '@modulz/radix-icons';\nimport { Icon as TablerIcon, CalendarStats } from 'tabler-icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  control: {\n    fontWeight: 500,\n    display: 'block',\n    width: '100%',\n    padding: `${theme.spacing.xs}px ${theme.spacing.md}px`,\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.black,\n    fontSize: theme.fontSizes.sm,\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.colors.gray[0],\n      color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n    },\n  },\n\n  link: {\n    fontWeight: 500,\n    display: 'block',\n    textDecoration: 'none',\n    padding: `${theme.spacing.xs}px ${theme.spacing.md}px`,\n    paddingLeft: 31,\n    marginLeft: 30,\n    fontSize: theme.fontSizes.sm,\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.colors.gray[7],\n    borderLeft: `1px solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[4] : theme.colors.gray[3]\n    }`,\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.colors.gray[0],\n      color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n    },\n  },\n\n  chevron: {\n    transition: 'transform 200ms ease',\n  },\n}));\n\ninterface LinksGroupProps {\n  icon: TablerIcon;\n  label: string;\n  initiallyOpened?: boolean;\n  links?: { label: string; link: string }[];\n}\n\nexport function LinksGroup({ icon: Icon, label, initiallyOpened, links }: LinksGroupProps) {\n  const { classes } = useStyles();\n  const hasLinks = Array.isArray(links);\n  const [opened, setOpened] = useState(initiallyOpened || false);\n  const items = (hasLinks ? links : []).map((link) => (\n    <Text<'a'>\n      component=\"a\"\n      className={classes.link}\n      href={link.link}\n      key={link.label}\n      onClick={(event) => event.preventDefault()}\n    >\n      {link.label}\n    </Text>\n  ));\n\n  return (\n    <>\n      <UnstyledButton onClick={() => setOpened((o) => !o)} className={classes.control}>\n        <Group position=\"apart\" spacing={0}>\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <ThemeIcon variant=\"light\" size={30}>\n              <Icon size={18} />\n            </ThemeIcon>\n            <Box ml=\"md\">{label}</Box>\n          </Box>\n          {hasLinks && (\n            <ChevronRightIcon\n              className={classes.chevron}\n              style={{ transform: opened ? 'rotate(90deg)' : 'none' }}\n            />\n          )}\n        </Group>\n      </UnstyledButton>\n      {hasLinks ? <Collapse in={opened}>{items}</Collapse> : null}\n    </>\n  );\n}\n\nconst mockdata = {\n  label: 'Releases',\n  icon: CalendarStats,\n  links: [\n    { label: 'Upcoming releases', link: '/' },\n    { label: 'Previous releases', link: '/' },\n    { label: 'Releases schedule', link: '/' },\n  ],\n};\n\nexport function NavbarLinksGroup() {\n  return (\n    <Box\n      sx={(theme) => ({\n        minHeight: 220,\n        padding: theme.spacing.md,\n        backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.white,\n      })}\n    >\n      <LinksGroup {...mockdata} />\n    </Box>\n  );\n}\n","category":{"name":"Navbars","path":"/category/navbars/"},"url":"/component/navbar-links-group","attributes":{"title":"Collapsible links group","category":"navbars","author":"rtivital","withColor":true,"dependencies":["/core/text/","/core/box/","/core/collapse/","/core/theme-icon/","/core/button/#unstyled-button"],"canvas":{"center":true,"maxWidth":320}}},{"_component":"NavbarMinimal","code":"import React, { useState } from 'react';\nimport {\n  Navbar,\n  Image,\n  Tooltip,\n  UnstyledButton,\n  createStyles,\n  Group,\n  hexToRgba,\n} from '@mantine/core';\nimport {\n  Icon as TablerIcon,\n  Home2,\n  Gauge,\n  DeviceDesktopAnalytics,\n  Fingerprint,\n  CalendarStats,\n  User,\n  Settings,\n  Logout,\n  SwitchHorizontal,\n} from 'tabler-icons-react';\nimport logo from './logo.svg';\n\nconst useStyles = createStyles((theme) => ({\n  link: {\n    width: 50,\n    height: 50,\n    borderRadius: theme.radius.md,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.colors.gray[7],\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[5] : theme.colors.gray[0],\n    },\n  },\n\n  active: {\n    '&, &:hover': {\n      backgroundColor:\n        theme.colorScheme === 'dark'\n          ? hexToRgba(theme.colors[theme.primaryColor][9], 0.25)\n          : theme.colors[theme.primaryColor][0],\n      color: theme.colors[theme.primaryColor][theme.colorScheme === 'dark' ? 4 : 7],\n    },\n  },\n}));\n\ninterface NavbarLinkProps {\n  icon: TablerIcon;\n  label: string;\n  active?: boolean;\n  onClick?(): void;\n}\n\nfunction NavbarLink({ icon: Icon, label, active, onClick }: NavbarLinkProps) {\n  const { classes, cx } = useStyles();\n  return (\n    <Tooltip label={label} position=\"right\" withArrow transitionDuration={0}>\n      <UnstyledButton onClick={onClick} className={cx(classes.link, { [classes.active]: active })}>\n        <Icon />\n      </UnstyledButton>\n    </Tooltip>\n  );\n}\n\nconst mockdata = [\n  { icon: Home2, label: 'Home' },\n  { icon: Gauge, label: 'Dashboard' },\n  { icon: DeviceDesktopAnalytics, label: 'Analytics' },\n  { icon: CalendarStats, label: 'Releases' },\n  { icon: User, label: 'Account' },\n  { icon: Fingerprint, label: 'Security' },\n  { icon: Settings, label: 'Settings' },\n];\n\nexport function NavbarMinimal() {\n  const [active, setActive] = useState(2);\n\n  const links = mockdata.map((link, index) => (\n    <NavbarLink\n      {...link}\n      key={link.label}\n      active={index === active}\n      onClick={() => setActive(index)}\n    />\n  ));\n\n  return (\n    <Navbar height={750} width={{ base: 80 }} padding=\"md\">\n      <Image src={logo} alt=\"Mantine logo\" width={40} mx=\"auto\" />\n      <Navbar.Section grow mt={50}>\n        <Group direction=\"column\" align=\"center\">\n          {links}\n        </Group>\n      </Navbar.Section>\n      <Navbar.Section>\n        <Group direction=\"column\" align=\"center\">\n          <NavbarLink icon={SwitchHorizontal} label=\"Change account\" />\n          <NavbarLink icon={Logout} label=\"Logout\" />\n        </Group>\n      </Navbar.Section>\n    </Navbar>\n  );\n}\n","category":{"name":"Navbars","path":"/category/navbars/"},"url":"/component/navbar-minimal","attributes":{"title":"Navbar with tooltips","category":"navbars","author":"rtivital","withColor":true,"dependencies":["/core/app-shell/","/core/button/#unstyled-button","/core/group/","/core/tooltip/","/core/image/"],"canvas":{"center":false}}},{"_component":"NavbarNested","code":"import React from 'react';\nimport { Navbar, Group, Code, createStyles } from '@mantine/core';\nimport {\n  Notes,\n  CalendarStats,\n  Gauge,\n  PresentationAnalytics,\n  FileAnalytics,\n  Adjustments,\n  Lock,\n} from 'tabler-icons-react';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport { UserButton } from '../UserButton/UserButton';\nimport { LinksGroup } from '../NavbarLinksGroup/NavbarLinksGroup';\nimport { Logo } from './Logo';\n\nconst mockdata = [\n  { label: 'Dashboard', icon: Gauge },\n  {\n    label: 'Market news',\n    icon: Notes,\n    initiallyOpened: true,\n    links: [\n      { label: 'Overview', link: '/' },\n      { label: 'Forecasts', link: '/' },\n      { label: 'Outlook', link: '/' },\n      { label: 'Real time', link: '/' },\n    ],\n  },\n  {\n    label: 'Releases',\n    icon: CalendarStats,\n    links: [\n      { label: 'Upcoming releases', link: '/' },\n      { label: 'Previous releases', link: '/' },\n      { label: 'Releases schedule', link: '/' },\n    ],\n  },\n  { label: 'Analytics', icon: PresentationAnalytics },\n  { label: 'Contracts', icon: FileAnalytics },\n  { label: 'Settings', icon: Adjustments },\n  {\n    label: 'Security',\n    icon: Lock,\n    links: [\n      { label: 'Enable 2FA', link: '/' },\n      { label: 'Change password', link: '/' },\n      { label: 'Recovery codes', link: '/' },\n    ],\n  },\n];\n\nconst useStyles = createStyles((theme) => ({\n  navbar: {\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.white,\n    paddingBottom: 0,\n  },\n\n  header: {\n    padding: theme.spacing.md,\n    paddingTop: 0,\n    marginLeft: -theme.spacing.md,\n    marginRight: -theme.spacing.md,\n    color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n    borderBottom: `1px solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[4] : theme.colors.gray[3]\n    }`,\n  },\n\n  links: {\n    marginLeft: -theme.spacing.md,\n    marginRight: -theme.spacing.md,\n    paddingTop: theme.spacing.xl,\n  },\n\n  footer: {\n    marginLeft: -theme.spacing.md,\n    marginRight: -theme.spacing.md,\n    borderTop: `1px solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[4] : theme.colors.gray[3]\n    }`,\n  },\n}));\n\nexport function NavbarNested() {\n  const { classes } = useStyles();\n  const links = mockdata.map((item) => <LinksGroup {...item} key={item.label} />);\n\n  return (\n    <Navbar height={800} padding=\"md\" className={classes.navbar}>\n      <Navbar.Section className={classes.header}>\n        <Group position=\"apart\">\n          <Logo width={120} />\n          <Code sx={{ fontWeight: 700 }}>v3.1.2</Code>\n        </Group>\n      </Navbar.Section>\n\n      <Navbar.Section grow className={classes.links}>\n        <Scrollbars>{links}</Scrollbars>\n      </Navbar.Section>\n\n      <Navbar.Section className={classes.footer}>\n        <UserButton\n          image=\"https://images.unsplash.com/photo-1508214751196-bcfd4ca60f91?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=255&q=80\"\n          name=\"Ann Nullpointer\"\n          email=\"anullpointer@yahoo.com\"\n        />\n      </Navbar.Section>\n    </Navbar>\n  );\n}\n","category":{"name":"Navbars","path":"/category/navbars/"},"url":"/component/navbar-nested","attributes":{"title":"Navbar with nested links","category":"navbars","author":"rtivital","withColor":true,"dependencies":["/core/app-shell/","/core/group/","/core/code/","/core/button/#unstyled-button","/component/user-button/","/component/navbar-links-group/","tabler-icons-react","react-custom-scrollbars"],"canvas":{"center":false}}},{"_component":"NavbarSearch","code":"import React from 'react';\nimport {\n  createStyles,\n  Navbar,\n  TextInput,\n  Code,\n  UnstyledButton,\n  Badge,\n  Text,\n  Group,\n  ActionIcon,\n  Tooltip,\n} from '@mantine/core';\nimport { CaretSortIcon, MagnifyingGlassIcon, PlusIcon } from '@modulz/radix-icons';\nimport { Bulb, User, Checkbox } from 'tabler-icons-react';\nimport { UserButton } from '../UserButton/UserButton';\n\nconst useStyles = createStyles((theme) => ({\n  navbar: {\n    paddingTop: 0,\n  },\n\n  section: {\n    marginLeft: -theme.spacing.md,\n    marginRight: -theme.spacing.md,\n    marginBottom: theme.spacing.md,\n\n    '&:not(:last-of-type)': {\n      borderBottom: `1px solid ${\n        theme.colorScheme === 'dark' ? theme.colors.dark[4] : theme.colors.gray[3]\n      }`,\n    },\n  },\n\n  searchCode: {\n    fontWeight: 700,\n    fontSize: 10,\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.colors.gray[0],\n    border: `1px solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.colors.gray[2]\n    }`,\n  },\n\n  mainLinks: {\n    paddingLeft: theme.spacing.md - theme.spacing.xs,\n    paddingRight: theme.spacing.md - theme.spacing.xs,\n    paddingBottom: theme.spacing.md,\n  },\n\n  mainLink: {\n    display: 'flex',\n    alignItems: 'center',\n    width: '100%',\n    fontSize: theme.fontSizes.xs,\n    padding: `8px ${theme.spacing.xs}px`,\n    borderRadius: theme.radius.sm,\n    fontWeight: 500,\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.colors.gray[7],\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n      color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n    },\n  },\n\n  mainLinkInner: {\n    display: 'flex',\n    alignItems: 'center',\n    flex: 1,\n  },\n\n  mainLinkIcon: {\n    marginRight: theme.spacing.sm,\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[2] : theme.colors.gray[6],\n  },\n\n  mainLinkBadge: {\n    padding: 0,\n    width: 20,\n    height: 20,\n  },\n\n  collections: {\n    paddingLeft: theme.spacing.md - 6,\n    paddingRight: theme.spacing.md - 6,\n    paddingBottom: theme.spacing.md,\n  },\n\n  collectionsHeader: {\n    paddingLeft: theme.spacing.md + 2,\n    paddingRight: theme.spacing.md,\n    marginBottom: 0,\n  },\n\n  collectionLink: {\n    display: 'block',\n    padding: `8px ${theme.spacing.xs}px`,\n    textDecoration: 'none',\n    borderRadius: theme.radius.sm,\n    fontSize: theme.fontSizes.xs,\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.colors.gray[7],\n    lineHeight: 1,\n    fontWeight: 500,\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n      color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n    },\n  },\n}));\n\nconst links = [\n  { icon: Bulb, label: 'Activity', notifications: 3 },\n  { icon: Checkbox, label: 'Tasks', notifications: 4 },\n  { icon: User, label: 'Contacts' },\n];\n\nconst collections = [\n  { emoji: '👍', label: 'Sales' },\n  { emoji: '🚚', label: 'Deliveries' },\n  { emoji: '💸', label: 'Discounts' },\n  { emoji: '💰', label: 'Profits' },\n  { emoji: '✨', label: 'Reports' },\n  { emoji: '🛒', label: 'Orders' },\n  { emoji: '📅', label: 'Events' },\n  { emoji: '🙈', label: 'Debts' },\n  { emoji: '💁‍♀️', label: 'Customers' },\n];\n\nexport function NavbarSearch() {\n  const { classes } = useStyles();\n\n  const mainLinks = links.map((link) => (\n    <UnstyledButton key={link.label} className={classes.mainLink}>\n      <div className={classes.mainLinkInner}>\n        <link.icon size={20} className={classes.mainLinkIcon} />\n        <span>{link.label}</span>\n      </div>\n      {link.notifications && (\n        <Badge size=\"sm\" variant=\"filled\" className={classes.mainLinkBadge}>\n          {link.notifications}\n        </Badge>\n      )}\n    </UnstyledButton>\n  ));\n\n  const collectionLinks = collections.map((collection) => (\n    <a\n      href=\"/\"\n      onClick={(event) => event.preventDefault()}\n      key={collection.label}\n      className={classes.collectionLink}\n    >\n      <span style={{ marginRight: 9, fontSize: 16 }}>{collection.emoji}</span> {collection.label}\n    </a>\n  ));\n\n  return (\n    <Navbar height={700} padding=\"md\" className={classes.navbar}>\n      <Navbar.Section className={classes.section}>\n        <UserButton\n          image=\"https://i.imgur.com/fGxgcDF.png\"\n          name=\"Bob Rulebreaker\"\n          email=\"Product owner\"\n          icon={<CaretSortIcon />}\n        />\n      </Navbar.Section>\n\n      <TextInput\n        placeholder=\"Search\"\n        size=\"xs\"\n        icon={<MagnifyingGlassIcon />}\n        rightSectionWidth={70}\n        rightSection={<Code className={classes.searchCode}>Ctrl + K</Code>}\n        styles={{ rightSection: { pointerEvents: 'none' } }}\n        mb=\"sm\"\n      />\n\n      <Navbar.Section className={classes.section}>\n        <div className={classes.mainLinks}>{mainLinks}</div>\n      </Navbar.Section>\n\n      <Navbar.Section className={classes.section}>\n        <Group className={classes.collectionsHeader} position=\"apart\">\n          <Text size=\"xs\" weight={500} color=\"dimmed\">\n            Collections\n          </Text>\n          <Tooltip label=\"Create collection\" withArrow position=\"right\">\n            <ActionIcon variant=\"default\" size={18}>\n              <PlusIcon style={{ width: 12, height: 12 }} />\n            </ActionIcon>\n          </Tooltip>\n        </Group>\n        <div className={classes.collections}>{collectionLinks}</div>\n      </Navbar.Section>\n    </Navbar>\n  );\n}\n","category":{"name":"Navbars","path":"/category/navbars/"},"url":"/component/navbar-search","attributes":{"title":"Navbar with search","category":"navbars","author":"rtivital","withColor":true,"dependencies":["/core/app-shell/","/core/badge/","/core/text-input","/core/text/","/core/group/","/core/action-icon/","/core/tooltip/","tabler-icons-react","@modulz/radix-icons"],"canvas":{"center":false}}},{"_component":"NavbarSegmented","code":"import React, { useState } from 'react';\nimport {\n  Navbar,\n  SegmentedControl,\n  Text,\n  createStyles,\n  getFocusStyles,\n  hexToRgba,\n} from '@mantine/core';\nimport {\n  ShoppingCart,\n  License,\n  Message2,\n  BellRinging,\n  Messages,\n  Fingerprint,\n  Key,\n  Settings,\n  TwoFA,\n  Users,\n  FileAnalytics,\n  DatabaseImport,\n  Receipt2,\n  ReceiptRefund,\n  Logout,\n  SwitchHorizontal,\n} from 'tabler-icons-react';\n\nconst useStyles = createStyles((theme, _params, getRef) => {\n  const icon = getRef('icon');\n\n  return {\n    navbar: {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.white,\n    },\n\n    title: {\n      textTransform: 'uppercase',\n      letterSpacing: -0.25,\n    },\n\n    link: {\n      ...getFocusStyles(theme),\n      display: 'flex',\n      alignItems: 'center',\n      textDecoration: 'none',\n      fontSize: theme.fontSizes.sm,\n      color: theme.colorScheme === 'dark' ? theme.colors.dark[1] : theme.colors.gray[7],\n      padding: `${theme.spacing.xs}px ${theme.spacing.sm}px`,\n      borderRadius: theme.radius.sm,\n      fontWeight: 500,\n\n      '&:hover': {\n        backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.colors.gray[0],\n        color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n\n        [`& .${icon}`]: {\n          color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n        },\n      },\n    },\n\n    linkIcon: {\n      ref: icon,\n      color: theme.colorScheme === 'dark' ? theme.colors.dark[2] : theme.colors.gray[6],\n      marginRight: theme.spacing.sm,\n    },\n\n    linkActive: {\n      '&, &:hover': {\n        backgroundColor:\n          theme.colorScheme === 'dark'\n            ? hexToRgba(theme.colors[theme.primaryColor][9], 0.25)\n            : theme.colors[theme.primaryColor][0],\n        color: theme.colors[theme.primaryColor][theme.colorScheme === 'dark' ? 4 : 7],\n        [`& .${icon}`]: {\n          color: theme.colors[theme.primaryColor][theme.colorScheme === 'dark' ? 4 : 7],\n        },\n      },\n    },\n\n    footer: {\n      borderTop: `1px solid ${\n        theme.colorScheme === 'dark' ? theme.colors.dark[4] : theme.colors.gray[3]\n      }`,\n      paddingTop: theme.spacing.md,\n    },\n  };\n});\n\nconst tabs = {\n  account: [\n    { link: '', label: 'Notifications', icon: BellRinging },\n    { link: '', label: 'Billing', icon: Receipt2 },\n    { link: '', label: 'Security', icon: Fingerprint },\n    { link: '', label: 'SSH Keys', icon: Key },\n    { link: '', label: 'Databases', icon: DatabaseImport },\n    { link: '', label: 'Authentication', icon: TwoFA },\n    { link: '', label: 'Other Settings', icon: Settings },\n  ],\n  general: [\n    { link: '', label: 'Orders', icon: ShoppingCart },\n    { link: '', label: 'Receipts', icon: License },\n    { link: '', label: 'Reviews', icon: Message2 },\n    { link: '', label: 'Messages', icon: Messages },\n    { link: '', label: 'Customers', icon: Users },\n    { link: '', label: 'Refunds', icon: ReceiptRefund },\n    { link: '', label: 'Files', icon: FileAnalytics },\n  ],\n};\n\ntype NavbarTab = 'account' | 'general';\n\nexport function NavbarSegmented() {\n  const { classes, cx } = useStyles();\n  const [section, setSection] = useState<NavbarTab>('account');\n  const [active, setActive] = useState('Billing');\n\n  const links = tabs[section].map((item) => (\n    <a\n      className={cx(classes.link, { [classes.linkActive]: item.label === active })}\n      href={item.link}\n      key={item.label}\n      onClick={(event) => {\n        event.preventDefault();\n        setActive(item.label);\n      }}\n    >\n      <item.icon className={classes.linkIcon} />\n      <span>{item.label}</span>\n    </a>\n  ));\n\n  return (\n    <Navbar height={840} padding=\"md\" className={classes.navbar}>\n      <Navbar.Section>\n        <Text weight={500} size=\"sm\" className={classes.title} color=\"dimmed\" mb=\"xs\">\n          bgluesticker@mantine.dev\n        </Text>\n\n        <SegmentedControl<NavbarTab>\n          value={section}\n          onChange={setSection}\n          transitionTimingFunction=\"ease\"\n          fullWidth\n          data={[\n            { label: 'Account', value: 'account' },\n            { label: 'System', value: 'general' },\n          ]}\n        />\n      </Navbar.Section>\n\n      <Navbar.Section grow mt=\"xl\">\n        {links}\n      </Navbar.Section>\n\n      <Navbar.Section className={classes.footer}>\n        <a href=\"#\" className={classes.link} onClick={(event) => event.preventDefault()}>\n          <SwitchHorizontal className={classes.linkIcon} />\n          <span>Change account</span>\n        </a>\n\n        <a href=\"#\" className={classes.link} onClick={(event) => event.preventDefault()}>\n          <Logout className={classes.linkIcon} />\n          <span>Logout</span>\n        </a>\n      </Navbar.Section>\n    </Navbar>\n  );\n}\n","category":{"name":"Navbars","path":"/category/navbars/"},"url":"/component/navbar-segmented","attributes":{"title":"Navbar with SegmentedControl","category":"navbars","author":"rtivital","withColor":true,"dependencies":["/core/app-shell/","/core/segmented-control/","/core/text/","tabler-icons-react"],"canvas":{"center":false}}}]}},
    "staticQueryHashes": []}